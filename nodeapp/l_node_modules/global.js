var path = require("path");
var fs = require("fs");

var child_process = require('child_process');
var os = require('os');

var _ = require("lodash");
var uuid = require('uuid').v1;
//const { resolveTxt } = require("node:dns");

var prompt =require('prompt');
var express =require('express');
var assert = require("assert");
var cookieParser = require('cookie-parser');
var csvparse = require('csv-parse')
var csvstringify = require('csv-stringify')
const multer = require('multer');
var jwt = require("jsonwebtoken");
var cors = require('cors');
var readline=require('readline');
var http=require('http')
var https=require('https')
let SFTPClient = require('ssh2-sftp-client');
let ssh2 = require('ssh2');
var SSH2Shell = require ('ssh2shell')

var moment = require('moment');
var moment = require('moment-timezone');

var async = require("async");

var bcrypt = require('bcryptjs');
var crypto = require('crypto');

var nodemailer = require('nodemailer');

var mongodb = require('mongodb'); // errors  
var xml2js = require('xml2js');
//var xml2json = require('xml2js').parseString;
//var json2xml = require('xml2js');
var excel = require('excel4node');

var dotenv=require('dotenv')

var socketio = require("socket.io");

const { delimiter } = require("path");
const e = require("express");


var mds={ 
    uuid : uuid, 
    prompt : prompt,
    express : express,
    http : http,
    https : https,
    fs : fs,   
    path : path,
    lodash : _,
    "_" : _ ,
    assert : assert,
    cookieParser : cookieParser,
    csvparse : csvparse,
    csvstringify : csvstringify,
    multer : multer,
    jsonwebtoken : jwt,
    jwt : jwt,
    cors : cors,
    readline : readline,
    SFTPClient : SFTPClient,
    ssh2 : ssh2,
    SSH2Shell : SSH2Shell,
    moment : moment, // moment-timezone
    //"moment-timezone" : moment-timezone,
    async : async,
    crypto : crypto,
    bcrypt : bcrypt,
    nodemailer : nodemailer,
    //mongodb : mongodb,
    xml2js : xml2js, //.parseString
    dotenv : dotenv,
    socketio : socketio
  


}

var vrtstd=function(){
    l_this = {
        name : "vrtstd"
        ,mds : mds
        ,get_json_db : function(){
            var args=arguments;
            var args_l=args.length;

            var cb=()=>{};
            var file="";
            if (!_.isUndefined(args[0])){
            file=args[0];
            }

            if (!_.isUndefined(args[1])){
            cb=args[1];
            }

            fs.readFile(file, 'utf8', function (err, data) {
                if (err){ console.log( err) }
            ///////
                var db_json = JSON.parse(data);

            ///////

                cb(db_json);
            });
        }
        ,get_json_db_sync : function(){
            var args=arguments;
            var args_l=args.length;

            var cb=()=>{};
            var file="";
            if (!_.isUndefined(args[0])){
            file=args[0];
            }

            if (!_.isUndefined(args[1])){
            cb=args[1];
            }
            
            var file_data_s=fs.readFileSync( file , 'utf8');

            var fn1=function (err, data) {
                if (err){ console.log( err) }
            ///////
                var db_json = JSON.parse(data);

            ///////

                cb(db_json);
            };
            fn1(undefined,file_data_s)
        }
        ,save_json_db : function(){
            var args=arguments;
            var args_l=args.length;

            var cb=()=>{};
            var file="";
            var data={};
            var text="";
            if (!_.isUndefined(args[0])){
            file=args[0];
            }
            if (!_.isUndefined(args[1])){
            data=args[1];
            if (_.isPlainObject(data)){
                text=JSON.stringify(data , null ,4)
            }else{
                text=data;
            }
            }

            if (!_.isUndefined(args[2])){
            cb=args[2];
            }
            
            fs.writeFile(file, text, function (err) {
                if (err){ console.log( err) }

                cb();
            });


        }
        ,save_file : function(){
            var args=arguments;
            var args_l=args.length;

            var cb=()=>{};
            var file="";
            var data="";
            var text="";
            if (!_.isUndefined(args[0])){
            file=args[0];
            }
            if (!_.isUndefined(args[1])){
            data=args[1];
            
            text=data
            }

            if (!_.isUndefined(args[2])){
            cb=args[2];
            }
            
            fs.writeFile(file, text, function (err) {
                if (err){ console.log( err) }

                cb();
            });


        }
        ,load_file : function(){
            var args=arguments;
            var args_l=args.length;

            var cb=()=>{};
            var file="";
            if (!_.isUndefined(args[0])){
            file=args[0];
            }

            if (!_.isUndefined(args[1])){
            cb=args[1];
            }

            fs.readFile(file, 'utf8', function (err, data) {
                if (err){ console.log( err) }
                
                cb(data,err);
            });


        }
        ,file_exists_sync : function(path){            
            var ret=fs.existsSync(path)
            
            return ret
        }
        ,shell : function(){
                            // commnand ,  callback function
                            var l_val="";            
                            var l_args=arguments;
                            var l_args_len=l_args.length;
                            var l_callback=function(){} ;
                            var l_command = "" ;
                            var param_array = [] ;

                            if ( l_args_len > 0 ){
                                var l_i=0;
                                switch( typeof l_args[l_i] ){
                                        case "object" :
                                            if (l_args[l_i] instanceof Array ){
                                                //param_array=l_args[l_i];
                                            }else{
                                                // is object

                                            }

                                            break;
                                        case "function" :
                                            l_callback=l_args[l_i];
                                            break;
                                        default :
                                            l_command=l_args[l_i] ;
                                            break;
                                }

                                var l_i=1;
                                if ( l_args_len > l_i ){
                                    switch( typeof l_args[l_i] ){
                                        case "object" :
                                            if (l_args[l_i] instanceof Array ){
                                                param_array=l_args[l_i];
                                            }else{
                                                // is object

                                            }
                                            break;
                                        case "function" :
                                            l_callback=l_args[l_i];
                                            break;
                                        default :
                                            break;
                                    }
                                }

                                var l_i=2;
                                if ( l_args_len > l_i ){
                                    switch( typeof l_args[l_i] ){
                                        case "object" :
                                            if (l_args[l_i] instanceof Array ){

                                            }else{
                                                // is object

                                            }
                                            break;
                                        case "function" :
                                            l_callback=l_args[l_i];
                                            break;
                                        default :
                                            break ;
                                    }
                                }


                            }else{
                                return ;
                            }

                            //console.log( "....",param_array);

                            var l_exec=child_process.exec;
                            l_exec( l_command ,{maxBuffer: 1024 * 40000}, function(error, stdout, stderr){
                                if ( !(stdout==="" && error==="Error: Command failed") ){
                                    if (error) {
                                    console.error(`exec error...:${error}` , '~~~' );
                                    l_callback( `exec error...:${error}` );
                                    return;
                                    }
                                }

                                l_callback( stdout );
                            });

                            return ;
                            ////////// old code
                            //var command_data=child_process.spawn("ping localhost" , [  "localhost" ] ) ;
                            var command_data=child_process.spawn(l_command , param_array ) ;
                            command_data.stdout.on('data', function(data){                                
                                l_val="stdout: " +  data;
                                //result=l_val;
                                //res.send( l_val ) ;
                            });

                            command_data.on('exit', function(code){                                                                
                                l_callback( l_val.toString()) ;
                            });


                        }
        
        ,ssh : function(cmd , param , cbnew){
            var cb=function(){}            

            var opts={
                host: '127.0.0.1',
                port: '22',
                //username: '',
                //password: '' 
            }

            if (!_.isUndefined(param) ){
                	if (_.isFunction(param)){
                        cb=param
                    }
                    if (_.isPlainObject (param)){
                        //cb=param
                        if (_.isPlainObject (param.conn)){
                            opts=param.conn
                            //console.log("ftp opts set")
                        }
                    }
            }
            if (!_.isUndefined(cbnew) ){
                if (_.isFunction(cbnew)){
                    cb=cbnew 
                }
            }

            var output=""
            var err=""
            
            const { Client } = ssh2;

            const conn = new Client();

            var sshexec=function(){
                conn.exec(cmd, (err, stream) => {
                    if (err){
                            //console.log(err) ;
                            output+=err
                    }
                    stream.on('close', (code, signal) => {
                        //console.log('Stream :: close :: code: ' + code + ', signal: ' + signal);
                        cb({ status : "success", data : output , err : undefined,err2 : undefined })
                        conn.end();
                    }).on('data', (data) => {
                        output+=data
                        //console.log('STDOUT: ' + data);
                    }).stderr.on('data', (data) => {
                        //console.log('STDERR: ' + data);
                        output+=data
                    });
                });
            }

            conn.on('ready', () => {
            //console.log('Client :: ready');
                sshexec()
              
            }).connect(opts).on("error",(err ,err2)=>{
                cb({ status : "failed", err : err,err2 : err2 , output : output} )
            });

        }
        ,ssh_shell : function(cmd , param , cbnew){
            var cb=function(){}            

            var opts={
                host: '127.0.0.1',
                port: '22',
                //username: '',
                //password: '' 
            }

            if (!_.isUndefined(param) ){
                	if (_.isFunction(param)){
                        cb=param
                    }
                    if (_.isPlainObject (param)){
                        //cb=param
                        if (_.isPlainObject (param.conn)){
                            opts=param.conn
                            //console.log("ftp opts set")
                        }
                    }
            }
            if (!_.isUndefined(cbnew) ){
                if (_.isFunction(cbnew)){
                    cb=cbnew 
                }
            }

            var output=""
            var err=""
            
            const { Client } = ssh2;

            const conn = new Client();

            var sshshell=function(){
                conn.exec(cmd, (err, stream) => {
                    if (err){
                            //console.log(err) ;
                            output+=err
                    }
                    stream.on('close', (code, signal) => {
                        //console.log('Stream :: close :: code: ' + code + ', signal: ' + signal);
                        cb({ status : "success", data : output , err : undefined,err2 : undefined })
                        conn.end();
                    }).on('data', (data) => {
                        output+=data
                        //console.log('STDOUT: ' + data);
                    }).stderr.on('data', (data) => {
                        //console.log('STDERR: ' + data);
                        output+=data
                    });
                });

                conn.shell((err, stream) => {
                    if (err){
                        console.log( err);
                    }
                    stream.on('close', () => {
                      //console.log('Stream :: close');
                      cb({ status : "success", data : output , err : undefined,err2 : undefined })
                      conn.end();
                    }).on('data', (data) => {
                        output+=data
                      //console.log('OUTPUT: ' + data);
                    });
                    stream.end(cmd + "\nexit\n");
                });
                
            }

            conn.on('ready', () => {
            //console.log('Client :: ready');
                sshshell()
              
            }).connect(opts).on("error",(err ,err2)=>{
                cb({ status : "failed", err : err,err2 : err2 , output : output} )
            });

        }
        ,ssh_prompt : function(cmds, param,cbnew){ // # ( [{ cmd:str,prompt:str, response:str ,write:str ,noENTER:str,cb :()},{}], {conn : {host:str,username:str,pass:str,port : int}}   )  #todo - in testing ,hard coded,not usuable for now 

            var cb=function(){}            

            var opts={
                host: '127.0.0.1',
                port: '22',
                //username: '',
                //password: '' 
            }

            var msg=function(){}
            var onError=function(){}
            var onCommandComplete=function(){}
            var onEnd=function(){}
            var onKeyboardInteractive=function(){}
            var idleTimeOut=5000
            var dataIdleTimeOut=500

            var suPassSent=false //used by commandProcessing to only send password once
            var rootPassSent=false
            var debug=false
            var verbose=false
            var enter="\n"
            var standardPrompt=">$%#"

            var showBanner=false
            var passwordPrompt=":"
            
            
            if (!_.isUndefined(param) ){
                	if (_.isFunction(param)){
                        cb=param
                    }
                    if (_.isPlainObject (param)){
                       
                        if (_.isPlainObject (param.conn)){
                            opts=param.conn                           
                        }if (_.isPlainObject (param.onError)){
                            onError=param.onError                           
                        }
                        if (_.isPlainObject (param.msg)){
                            msg=param.msg                           
                        }
                        if (_.isPlainObject (param.onCommandComplete)){
                            onCommandComplete=param.onCommandComplete                           
                        }
                        if (_.isPlainObject (param.onEnd)){
                            onEnd=param.onEnd                           
                        }
                        if (_.isPlainObject (param.onKeyboardInteractive)){
                            onKeyboardInteractive=param.onKeyboardInteractive                           
                        }
                        if (_.isPlainObject (param.idleTimeOut)){
                            idleTimeOut=param.idleTimeOut                           
                        }
                        if (_.isPlainObject (param.dataIdleTimeOut)){
                            dataIdleTimeOut=param.dataIdleTimeOut                           
                        }
                        if (_.isPlainObject (param.suPassSent)){
                            suPassSent=param.suPassSent                           
                        }
                        if (_.isPlainObject (param.rootPassSent)){
                            rootPassSent=param.rootPassSent                           
                        }
                        if (_.isPlainObject (param.debug)){
                            debug=param.debug                           
                        }
                        if (_.isPlainObject (param.verbose)){
                            verbose=param.verbose                           
                        }
                        if (_.isPlainObject (param.enter)){
                            enter=param.enter                           
                        }
                        if (_.isPlainObject (param.standardPrompt)){
                            standardPrompt=param.standardPrompt                           
                        }
                        if (_.isPlainObject (param.showBanner)){
                            showBanner=param.showBanner                           
                        }
                        if (_.isPlainObject (param.passwordPrompt)){
                            passwordPrompt=param.passwordPrompt                           
                        }
                        

                    }
            }
            if (!_.isUndefined(cbnew) ){
                if (_.isFunction(cbnew)){
                    cb=cbnew 
                }
            }

            var q1=false;

            var prompts=[]
            var prec={}

            var cmd_to_run=[]
            _.each(cmds,function(r,i){
                 cmd_to_run.push(r.cmd)
                 r.hasrun=false;
            })
            
            var server={     
                    host :         opts.host,
                    userName :     opts.username,
                    //password:     "1234",
                    //disablePseudoTTY : false,
                    //forcePseudoTTY : false 
                 }
            var temp=_.merge( server ,param.conn)
            server=temp;

            var runparams = {
                server : server,
                commands : cmd_to_run,
                suPassSent:         suPassSent, //used by commandProcessing to only send password once
                rootPassSent:       rootPassSent,
                debug:              debug,
                verbose:            verbose,
                enter:              enter,
                standardPrompt:    standardPrompt,

                showBanner:         showBanner,
                passwordPrompt:     passwordPrompt,
                
                ///*
                onCommandProcessing: function( command, response, sshObj, stream ) {
                    //if (command==="ls -la" && response.indexOf("Password: ") != -1){
                    //if (command==="echo name"
                    
                    /*
                    // testing function confirmed working
                    if (command==="read q"
                                && !q1
                        //     && response.indexOf("Password: ") != -1
                        ){
                        //runparams.commands.unshift("msg:Using secondary user password");
                        console.log("ls used ....")
                        //runparams.suPassSent = true;
                        stream.write("my name is jon doe" + "\n");
                        q1=true
                    }
                    */
                    var args=arguments
                    _.each(cmds,function(r,i){
                        if (!_.isUndefined(r.prompt)){ 
                            if (command===r.prompt
                                    && !r.hasrun
                            ){
                                if (!_.isUndefined(r.write)){ 
                                    
                                    if (!_.isUndefined(r.noEnter)){
                                        if (r.noEnter){
                                            stream.write(r.write)
                                        }else{
                                            stream.write(r.write + "\n")
                                        }
                                    }else{
                                        stream.write(r.write + "\n")
                                    }
                                }
                                if (!_.isUndefined(r.cb)){ 
                                    r.cb({ args : args , i :i , r : r })
                                }

                                r.hasrun=true;

                            }
                        }
                        if (!_.isUndefined(r.response)){ 
                            if (command===r.cmd
                                    && response.indexOf("Password: ") != -1
                                    && !r.hasrun
                            ){
                                if (!_.isUndefined(r.write)){ 
                                    
                                    if (!_.isUndefined(r.noEnter)){
                                        if (r.noEnter){
                                            stream.write(r.write)
                                        }else{
                                            stream.write(r.write + "\n")
                                        }
                                    }else{
                                        stream.write(r.write + "\n")
                                    }
                                }
                                if (!_.isUndefined(r.cb)){ 
                                    r.cbcb({ args : args , i :i , r : r })
                                }
                                r.hasrun=true;

                            }
                        }
                        
                   })

                },
                onCommandComplete: onCommandComplete //  function( command, response, sshObj ) {
                    //response is the full response from the host for the last command
                    //sshObj is the current host object.
                //}
                ,
                   
                idleTimeOut:idleTimeOut,  //       5000, 
                dataIdleTimeOut:dataIdleTimeOut , //   500,
                onEnd:onEnd//function( sessionText, sshObj ) {
                    //SessionText is the full text for this hosts session   
                    //sshObj is the host object
                //}
                ,                     
                //Optional: Run when an error event is raised be it connection or otherwise.
                onError: onError //function( err, type, close , callback ) { // close= false
                    
                //}
                ,
                /*
                onKeyboardInteractive(name, instructions, instructionsLang, prompts, finish){
                    console.log("onKeyboardInteractive : ", name, instructions, instructionsLang, prompts, finish)

                },
                */
                msg: {
                    send: msg //function( message ) {
                      //console.log(message);
                    //}
                },
                
            };
               
            if (!_.isUndefined(opts.password)){
                runparams.server.password=opts.password
            }
            if (!_.isUndefined(opts.passPhrase)){
                runparams.server.passPhrase=opts.passPhrase
            }
            if (!_.isUndefined(opts.privateKey)){
                runparams.server.privateKey=opts.privateKey
            }
            
            
            //Create a new instance passing in the host object
           var SSH = new SSH2Shell(runparams)
            //Use a callback function to process the full session text
            var callback = function(sessionText){
                cb(sessionText)
                //console.log(sessionText)
            }
            
            
            //Start the process
            SSH.connect(callback);
        }

        /*
        //ftp usage tests
        //$gl.sftp_get("/mnt/c/nodeproj/testdata/sftp/src/abc.txt", 
        //            "/mnt/c/nodeproj/testdata/sftp/dst/abc.txt", 
        $gl.sftp_getDir("/mnt/c/nodeproj/testdata/sftp/dst", 
                    "/mnt/c/nodeproj/testdata/sftp/src", 
        //$gl.sftp_putDir("/mnt/c/nodeproj/testdata/sftp/src", 
        //            "/mnt/c/nodeproj/testdata/sftp/dst", 
                    { ftp :{
                                host: '127.0.0.1',
                                port: '22',
                                username: '',
                                password: '' 
                            }
                    } , 
                    function(){ console.log("ftp done") } 
        )
        */
        ,sftp_get : function(src , dst , param , cbnew){ // remote to locla
             // src file , dest file // must be files both not just dir
            var cb=function(){}            

            var opts={
                host: '127.0.0.1',
                port: '22',
                //username: '',
                //password: '' 
            }

            if (!_.isUndefined(param) ){
                	if (_.isFunction(param)){
                        cb=param
                    }
                    if (_.isPlainObject (param)){
                        //cb=param
                        if (_.isPlainObject (param.ftp)){
                            opts=param.ftp
                            //console.log("ftp opts set")
                        }
                    }
            }
            if (!_.isUndefined(cbnew) ){
                if (_.isFunction(cbnew)){
                    cb=cbnew 
                }
            }

            let sftp = new SFTPClient();
        
            sftp.connect(opts).then(() => {                
                    
                    sftp.fastGet(src, dst).then(() => {                    
                    cb()    
                    sftp.end();
                    
                }).catch((err) => {
                    cb(err)
                    sftp.end();
                    
                   
                })
        
                return {} 
            }).then(data => {                
            }).catch(err => {
                cb()
                console.log(err, 'ftp catch error');
            });
        
        
        }
        ,sftp_getDir : function(src , dst , param , cbnew){ // remote to locla        
           var cb=function(){}
           var opts={
               host: '127.0.0.1',
               port: '22',
               //username: '',
               //password: '' 
           }

           if (!_.isUndefined(param) ){
                   if (_.isFunction(param)){
                       cb=param
                   }
                   if (_.isPlainObject (param)){
                       //cb=param
                       if (_.isPlainObject (param.ftp)){
                           opts=param.ftp
                           //console.log("ftp opts set")
                       }
                   }
           }
           if (!_.isUndefined(cbnew) ){
               if (_.isFunction(cbnew)){
                   cb=cbnew 
               }
           }

           let sftp = new SFTPClient();
       
           sftp.connect(opts).then(() => {                                  
                sftp.downloadDir(src, dst).then(() => {                   
                   cb()    
                   sftp.end();                   
               }).catch((err) => {
                   cb(err)
                   sftp.end();                  
               })       
               return {} 
           }).then(data => {
               //cb()
               //console.log(data, 'the data info');
           }).catch(err => {
               cb()
               console.log(err, 'ftp catch error');
           });
       
       
       }
        ,sftp_put : function(src , dst , param , cbnew){ // local to remote
            // src file , dest file // must be files both not just dir
           var cb=function(){}

           var opts={
               host: '127.0.0.1',
               port: '22',
               //username: '',
               //password: '' 
           }

           if (!_.isUndefined(param) ){
                   if (_.isFunction(param)){
                       cb=param
                   }
                   if (_.isPlainObject (param)){
                       if (_.isPlainObject (param.ftp)){
                           opts=param.ftp
                           //console.log("ftp opts set")
                       }
                   }
           }
           if (!_.isUndefined(cbnew) ){
               if (_.isFunction(cbnew)){
                   cb=cbnew 
               }
           }
           let sftp = new SFTPClient();
       
           sftp.connect(opts).then(() => {            
                sftp.fastPut(src, dst).then(() => {                   
                   cb()    
                   sftp.end();
                   
               }).catch((err) => {
                   cb(err)
                   sftp.end();
                   //console.log(err, 'fastGet method error');                  
               })
       
               return {} 
           }).then(data => {
               //cb()
               //console.log(data, 'the data info');
           }).catch(err => {
               cb()
               console.log(err, 'ftp catch error');
           });
       
       
        }
        ,sftp_putDir : function(src , dst , param , cbnew){ // local to remote
            // src file , dest file // must be files both not just dir
           var cb=function(){}

           var opts={
               host: '127.0.0.1',
               port: '22',
               //username: '',
               //password: '' 
           }

           if (!_.isUndefined(param) ){
                   if (_.isFunction(param)){
                       cb=param
                   }
                   if (_.isPlainObject (param)){
                       //cb=param
                       if (_.isPlainObject (param.ftp)){
                           opts=param.ftp
                           //console.log("ftp opts set")
                       }
                   }
           }
           if (!_.isUndefined(cbnew) ){
               if (_.isFunction(cbnew)){
                   cb=cbnew 
               }
           }

           let sftp = new SFTPClient();
       
           sftp.connect(opts).then(() => {                   
                sftp.uploadDir(src, dst).then(() => {                   
                   cb()    
                   sftp.end();
                   
               }).catch((err) => {
                   cb(err)
                   sftp.end();
                   //console.log(err, 'fastGet method error');                  
               })
       
               return {} 
           }).then(data => {
               //cb()
               //console.log(data, 'the data info');
           }).catch(err => {
               cb()
               console.log(err, 'ftp catch error');
           });
       
       
        }
        ,sftp_list : function( param , cbnew){ // local to remote
            // src file , dest file // must be files both not just dir
           var cb=function(){}

           var opts={
               host: '127.0.0.1',
               port: '22',
               //username: '',
               //password: '' 
           }

           if (!_.isUndefined(param) ){
                   if (_.isFunction(param)){
                       cb=param
                   }
                   if (_.isPlainObject (param)){
                       //cb=param
                       if (_.isPlainObject (param.ftp)){
                           opts=param.ftp
                           //console.log("ftp opts set")
                       }
                   }
           }
           if (!_.isUndefined(cbnew) ){
               if (_.isFunction(cbnew)){
                   cb=cbnew 
               }
           }

           let sftp = new SFTPClient();
       
           sftp.connect(opts).then(() => {
       
               return sftp.list()
           }).then(data => {
               cb(data)
               //console.log(data, 'the data info');
           }).catch(err => {
               cb()
               console.log(err, 'ftp catch error');
           });       
        }

        ,uuid_sort : function(arr){
                /* to use example
                var uuid_a=[uuid(),uuid(),uuid() ]
                uuid_r=[uuid_a[1],uuid_a[2],uuid_a[0]]
                console.log(uuid_r);
                console.log ( 'sorted' , uuid_sort(uuid_r) )
                */
                var toSortableUUID=function(uuidV1){
                  return uuidV1.replace(/^(.{8})-(.{4})-(.{4})/, '$3-$2-$1')
                }
                var uuidCompare=function(uuidV1A, uuidV1B)  {
                    if (uuidV1A === uuidV1B) {
                        return 0;
                    }
                    const a = toSortableUUID(uuidV1A);
                    const b = toSortableUUID(uuidV1B);
                    return a < b ? -1 : 1;
                }
        }
        ,sdate : function(){
                var l_date;
                l_date=moment().format("DD-MM-YYYY");
                return l_date;
        }
        ,stime : function(){
                var l_time;
                l_time=moment().format( "HH:mm.ss");
                return l_time
        }
        ,uuid : uuid

        ,csv_to_json_simple : function(){

            var l_args=arguments;
            var l_args_l=arguments.length;
            var l_callback = function(){} ;


            var csv=l_args[0] ;
            var delim="," ;

            var l_obj_array=[] ;

            var delim="," ;
            if (l_args_l > 1){
                delim=l_args[1];
            }
            if (l_args_l > 2){
                l_callback=l_args[2];
            }


            csv=csv.replace(/\r?\r\n/g, "\n");
            var lines=csv.split("\n");

            var headers=lines[0].split(delim);

            var l_i=0 ;
            while ( l_i < headers.length ){
                headers[l_i]=headers[l_i].trim() ;
                l_i++ ;
            }

            var obj;
             var currentline;
            for(var i=1;i<lines.length;i++){

                        obj = {};
                        currentline=lines[i].split(delim);

                        for(var j=0;j<headers.length;j++){
                            if( typeof currentline[j] === 'string' ) {
                                if ( typeof  currentline[j]!== "undefined"){
                                    obj[headers[j]] = currentline[j].trim();
                                }else{
                                    obj[headers[j]] = "?????????????????" ;
                                }
                            }else{
                                if ( typeof  currentline[j]!== "undefined"){
                                    obj[headers[j]] = currentline[j];
                                }else{
                                    obj[headers[j]]="############";
                                }
                            }

                        }
                        l_obj_array.push(obj);

                }

            if (l_args_l > 2){
                return l_callback( l_obj_array ) ;
            }else{
                return l_obj_array ;
            }
        }

        ,searchJS : function (){
            // creator : Robert ,Tyobeka
            // updated by :   ,
            // updated on :  ##/##/####
            // example_usage : "
            // search( [{ name :"joane"} , { name : "rob" }] ,"j" , "name" )
            // or
            // search( { data : [{ name:"rob"},{ name:"abe"}] , key : "name" , search:"ro" } )

            var l_args=arguments;
            var l_args_l=arguments.length;
            var s_val_param;
            var l_data_array;
            var l_uniq=false;
            var l_equal=false;
            var l_uniq_type="first";
            var l_count_keys=0;

            var l_key;
            var l_data;
            var l_search_var;

            var l_pm=0;

            {
                l_pm=1;		// data or { data : [{ name:"rob"},{ name:"abe"}] , key : "name" , search:"ro",unique:false }
                if ( l_args_l > l_pm-1){
                    l_data_array=l_args[l_pm-1];
                    if ( typeof l_args[l_pm-1]==="object"){
                        if ( l_args[l_pm-1] instanceof Array){
                        }else{
                            var l_obj= l_args[l_pm-1] ;
                            var  val , key ;
                            for (var key in l_obj) {
                                   l_count_keys++;
                               //key
                               val=l_obj[key];
                                switch( key ) {
                                    case "data" :
                                            l_data_array=val;
                                        break;
                                    case "key" :
                                            l_key=val;
                                        break;
                                    case "search" :
                                            s_val_param=val;
                                        break;
                                    case "unique" :
                                            l_uniq=val;
                                        break;
                                    case "unique_type" :
                                        l_uniq_type=val;
                                    case "equal" :
                                        l_equal=val;
                                    break;

                                    default :
                                        break;
                                }
                            }
                            if (l_count_keys=2 & l_uniq===true ){

                            }
                        }
                    }
                }

                l_pm=2;
                if ( l_args_l > l_pm-1){
                    s_val_param=l_args[l_pm-1];
                }

                l_pm=3;
                if ( l_args_l > l_pm-1){
                    l_key=l_args[l_pm-1];
                }

                l_pm=4;
                if ( l_args_l > l_pm-1){
                    l_uniq=l_args[l_pm-1];
                }

                l_pm=5;
                if ( l_args_l > l_pm-1){
                    l_equal=l_args[l_pm-1];
                }


            }


            //l_key=;
            l_data=l_data_array;
            l_search_var=s_val_param	;

            var l_record;
            var l_results=[];
            /*
            {
                l_data=[
                    {  name : "rob"}
                    ,{  name : "robe"}
                    ,{  name : "dan"}
                    ,{  name : "joane"}
                    ,{  name : "ken"}
                    ,{  name : "ryu"}
                ]
            }
            */

            var pattern= new RegExp("" + l_search_var + "" , "i" );
            var l_i=0;
            while (l_i < l_data.length){
                l_record=l_data[l_i] ;

                if (l_record!==""){
                    if(pattern.test( l_record[l_key] )){
                        l_results.push(l_record);
                    }
                }
                l_i++;
            }
            l_results;
            return l_results;
        }

        ,csv_parse :function( csv ,fn1){
            var cb=function(){}
            if (!_.isUndefined(fn1)){ 
                cb=fn1;
            }
            csvparse(csv.trim(), {
                     columns: true
                    }, function(err, records){               
                        //console.log(records)
                        cb(records,err)
                    })
        }
        ,json_to_csv :function( jscsv ,fn1){
            var cb=function(){}
            if (!_.isUndefined(fn1)){ 
                cb=fn1;
            }
            /*
                var cols=[]
                if (jscsv.length > 0 ){
                    _.each(jscsv[0] , (r,p)=>{
                        key={key : p }
                        cols.push(key)
                    })
                }
            */
            csvstringify(jscsv, 
                        {
                            //columns: cols,
                            header: true
                        },
                        function(err, csvstr){               
                            //console.log(records)
                            cb(csvstr,err)
                        })
        }

        ,tsv_parse :function( csv ,fn1){
            var cb=function(){}
            if (!_.isUndefined(fn1)){ 
                cb=fn1;
            }
            csvparse(csv.trim(), 
                    {
                     columns: true,
                     delimiter : "\t"
                    }, function(err, records){               
                        //console.log(records)
                        cb(records,err)
                    })
        }
        ,json_to_tsv :function( csv ,fn1){
            var cb=function(){}
            if (!_.isUndefined(fn1)){ 
                cb=fn1;
            }
            var cols=[]
            /*
            if (jscsv.length > 0 ){
                _.each(jscsv[0] , (r,p)=>{
                    key={key : p }
                    cols.push(key)
                })
            }
            */
            csvstringify(csv, 
                        {
                            //columns: cols,
                            header: true,
                            delimiter : "\t"
                        },
                
                        function(err, csvstr){               
                            //console.log(records)
                            cb(csvstr,err)
                        })
        }

        ,dateDiff : function(d1,d2, params,cb){
            var ms=d2-d1

            var diff

            type="s" // seconds

            if (_.isPlainObject(params)){
                if (!_.isUndefined(params.type)){
                    type=params.type
                }
            }

            if (type==="s"){
                diff=ms * 1000
            }
            if (type==="mi"){
                diff=(ms * 1000) * 60
            }
            if (type==="h"){
                diff=((ms * 1000) * 60) * 60
            }
            if (type==="d"){
                diff=(((ms * 1000) * 60) * 60 ) * 24
            }


            rval={ ms : ms , diff : diff , a : { y : 0 ,m : 0 , d : 0 , h : 0 , mi : 0 , s : 0} }
            
            if (_.isFunction(cb)){
                cb(rval)
            }  
            
            return rval
        }

        ,batchRunTimed : function(params, runitems_arr ,cb , cb_end){ // waterfall timed kick off
            /*
                // example of use : kicks off 3 at a time evert 3 seconds 
                batchRun( 
                    {  count : 3,interval : 3000} , 
                        custtest , 
                        function(ret){
                            console.log( "running : ", new Date(), " - " ,ret)
                            return
                        
                        }, 
                        function(){
                            console.log( "...done" )
                        }
                )
            */
        
        
            var interval=5000
            var count=2
            var usetimout=true
            var arr_copy = JSON.parse(JSON.stringify(runitems_arr)) //workaround for non native deep copy arry options {...runitems_arr}
            var endcb_hasrun=false
            var waitfornext=false
        
            if (params.interval){
                interval=params.interval
            }
            if (params.count){
                count=params.count
            }
            if (params.usetimout){
                usetimout=params.usetimout
            }
            if (params.waitfornext){
                waitfornext=params.waitfornext
            }
        
            var total=runitems_arr.length
            var wI=0
            var run=true
            
            var cnt=0
            var recur= function(arr,count,cb){
                if (arr.length ===0){
                    //cb_end()
                    return
                }
                cnt++
                
                var next_hasrun=false
                var next=function(){
                    arr.splice(0 , 1 )
                    recur(arr, count, cb) 
                    next_hasrun=true
        
                    if (arr.length===0){   
                        if (!endcb_hasrun){         
                            cb_end()
                            endcb_hasrun=true
                        }    
                    }
        
                    return
                }
        
                var iter=0
                var totalcount=count
                var count_batch_subtotal=1
                var nxt={}
                while (iter < totalcount){
                    if (arr.length===0){   
                        if (!endcb_hasrun){         
                            cb_end()
                            endcb_hasrun=true
                        }
                        return
                        break
                        
                    }
                    count_batch_subtotal++
                    nxt={ next : next , count_batch_subtotal : count_batch_subtotal ,arr_len : arr.length }
        
                    cb(arr[0] , nxt)
                    if ( waitfornext){
                        return
                    }
                    arr.splice(0 , 1 )
                    iter++
                }
                
                if ( !waitfornext){
                    if (usetimout){
                        setTimeout(
                            function(){
                                if (!next_hasrun){
                                    recur(arr, count, cb) 
                                }
                            } 
                            , interval 
                        )
                    }else{
                        if (!next_hasrun){
                            recur(arr, count, cb)
                        }
                        
                    }
                }
                    
                
                
            }
            var initRecfunction=function(arr , count,cb){
                
                recur(arr , count , cb)
            }
            /////////////////////////////////////
            initRecfunction(arr_copy , count , cb )
        }

        ,depcy : function(){      
            //var l_this=this  
            var l_obj={
                    l_this : l_this,
                    recs : [],
                    check : function(){
                        var l_this=this.l_this
                        this.recs.forEach(function(r,i){
                            var status=true
                            var type="f"
                            if (r.type==="mkdir" || r.type==="md"){
                                if (mds.fs.existsSync(r.dir)) {
                                    status=true 
                                    type="md"                  
                                }else{
                                    status=false
                                    type="md"   
                                    console.log(`\n\n\nerror : ${r.dir} doenst exists\n\n\n`)
                                }
                            }
                            if (r.type==="dir" || r.type==="d"){
                                if (mds.fs.existsSync(r.dir)) {
                                    status=true 
                                    type="d"                  
                                }else{
                                    status=false
                                    type="d"   
                                    console.log(`\n\n\nerror : ${r.dir} doenst exists\n\n\n`)
                                }
                            }
                            if (r.type==="file" || r.type==="f"){
                                if (mds.fs.existsSync(r.file)) {
                                    status=true 
                                    type="f"                  
                                }else{
                                    status=false
                                    type="f"
                                    console.log(`\n\n\nerror : ${r.file} doenst exists\n\n\n`)
                                }
                            }
                
                            if (!status){
                                if (type==="md"){
                                    console.log(`updating from template directory : ${r.dir}` )
                                    if (r.res.action==="makedir"){
                
                                        if (!_.isUndefined(r.test)){
                                            if (r.test){
                                                return;
                                            }
                                        }
                
                                        var cmdinit=`mkdir -p ${r.dir}`
                                        console.log(cmdinit)
                                        l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                        
                                    }
                                }
                
                                if (type==="d"){
                                    console.log(`updating from template directory : ${r.dir}` )
                                    if (r.res.action==="copydir"){
                
                                        if (!_.isUndefined(r.test)){
                                            if (r.test){
                                                return;
                                            }
                                        }
                
                                        var cmdinit=`mkdir -p ${r.dir} ;cp -Rp ${r.res.src } ${r.dir}`
                                        console.log(cmdinit)
                                        l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                        
                                    }
                                }
                
                                if (type==="f"){
                                    console.log(`updating from template file : ${r.file}` )
                                    if (r.res.action==="fetchtemplate"){
                
                                        if (!_.isUndefined(r.test)){
                                            if (r.test){
                                                return;
                                            }
                                        }
                
                                        var cmdinit=`cp -p ${r.res.src } ${r.file}`
                                        console.log(cmdinit)
                                        l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                        
                                    }
                                }
                
                            }
                            
                
                        })
                        
                    },
                    add : function(rec){
                        var l_this=this.l_this
                        this.recs.push(rec)
                    },
                    init : function(){
                        var l_this=this.l_this
                        //this.check()
                    }
                
                
                }
                
            l_obj.init.apply( this , arguments)
            return l_obj
         }

        ,autoLoadModules: function (fpath) {    
            var mds={};
            var skip_exp_name=false;
            var params={}
            if ( !_.isUndefined(arguments[1]) ){
                if (_.isPlainObject(arguments[1])){
                    params=arguments[1]
                }else{
                    skip_exp_name=arguments[1]
                }
                
            }

            if ( !_.isUndefined(arguments[2]) ){
                if (_.isPlainObject(arguments[2])){
                    params=arguments[2]
                }
                
            }
        
            var stat=fs.lstatSync(fpath);
            if (stat.isDirectory()) {
                // we have a directory: do a tree walk
                var files=fs.readdirSync(fpath);
                var f, l = files.length;
                for (var i = 0; i < l; i++) {
                    f = path.join(fpath, files[i]);
                    if (f.endsWith(".js")){ 
                        //console.log("require( " , f , " )")
                        var temp=require(f)
                        //mds[f.replace("\.js", "")]=
                        if (skip_exp_name ){ // dont use export name , just use export library values id object has been exported 
                            if ( _.isPlainObject(temp)){
                                _.each(temp, function(val,prop){                
                                    _.each(val, function(val2,prop2){
                                        mds[prop2]=val2
                                    })
                                })
                                
                            }else{
                                _.each(temp, function(val,prop){                
                                    mds[prop]=val                    
                                })
                            }
                            
                        }else{
                            _.each(temp, function(val,prop){                
                                mds[prop]=val
                                //console.log(prop)
                                if (!_.isUndefined(mds[prop]["auto_run"] )){
                                    mds[prop]["auto_run"](params)
                                };
                            })
                        }
                    
                    
            
                    }
                }
            }
            return mds;
        }
        

        ,initMongoDB : function (params,cb) { // paramse : { connection : { host : "localhost" , dbname : "some_db", dbpass : "" , dbuser : ""  , dbport : "" }  }
            var connection={}
            var t={ status : true , err : undefined}



            var host="localhost:27017";
			var new_host=false;
			var new_port=false;

            if (!_.isUndefined(params.dbhost)){
                if ( params.dbhost!==""){				
                    connection.dbhost=params.dbhost ;				
                    new_host=true;
                }

            }

            if (!_.isUndefined( params.dbport)){
                if ( params.dbport!==""){				
                    connection.dbport=params.dbport ;
                    new_port=true;
                }
            }
			
			
			
			if ( new_host){
				if ( new_port){
					host=connection.dbhost + ":" + connection.dbport
				}else{
					host=connection.dbhost + ":" + "27017"
				}
			}else{
				if ( new_port){
					if ( new_host){
						host=connection.dbhost + ":" + connection.dbhost
					}else{
						host="localhost" + ":" + connection.dbport
					}
				}
			}
			connection.host=host;

            var mongoclient=mongodb.MongoClient;
				var userandpass=""
				//console.log(connection)
				var option={};
				option.useNewUrlParser=true;
				option.useUnifiedTopology= true ;
				if (connection.dbpass!==""){
					option.user=connection.dbuser;
					option.password=connection.dbpass;
          
					//userandpass=connection.dbuser + ":" + "123";//;connection.dbpass ;
					//userandpass=userandpass + "@" // @ sign in password literal causes issue , so rather use options to specify user and pass 
				}
				var url = 'mongodb://' +  connection.host + "/" + connection.dbname;
				
				//console.log(url);
				//mongoclient.connect( url , { useNewUrlParser: true}, function(err, client) {
				mongoclient.connect( url , option , function(err, client) {
                    
                    if (!_.isNull( err)){
                        if (!_.isUndefined(err)){
                            assert.equal(null, err);
                            console.log("mongoDB err : " + err);	
                            t.err=err
                            t.status=false
                            cb(t); 	
                            return;	
                        }		
                    }
					
                    //console.log("Connected successfully to DB server");				
						db = client.db(connection.dbname);
					
						//var user=db.collection("users");
						
						t.db=db;				
						cb(t); 									  
					
					//client.close();
				});

        }

        ,initMongoDBadmin : function (params,cb) { // paramse : { connection : { host : "localhost" , dbname : "some_db", dbpass : "" , dbuser : ""  , dbport : "" }  }
            var connection={}
            var t={ status : true , err : undefined}



            var host="localhost:27017";
			var new_host=false;
			var new_port=false;

            if (!_.isUndefined(params.dbhost)){
                if ( params.dbhost!==""){				
                    connection.dbhost=params.dbhost ;				
                    new_host=true;
                }

            }

            if (!_.isUndefined( params.dbport)){
                if ( params.dbport!==""){				
                    connection.dbport=params.dbport ;
                    new_port=true;
                }
            }
			
			
			
			if ( new_host){
				if ( new_port){
					host=connection.dbhost + ":" + connection.dbport
				}else{
					host=connection.dbhost + ":" + "27017"
				}
			}else{
				if ( new_port){
					if ( new_host){
						host=connection.dbhost + ":" + connection.dbhost
					}else{
						host="localhost" + ":" + connection.dbport
					}
				}
			}
			connection.host=host;

            var mongoclient=mongodb.MongoClient;
				var userandpass=""
				//console.log(connection)
				var option={};
				option.useNewUrlParser=true;
				option.useUnifiedTopology= true ;
				if (connection.dbpass!==""){
					option.user=connection.dbuser;
					option.password=connection.dbpass;
          
					//userandpass=connection.dbuser + ":" + "123";//;connection.dbpass ;
					//userandpass=userandpass + "@" // @ sign in password literal causes issue , so rather use options to specify user and pass 
				}
				var url = 'mongodb://' +  connection.host ;
				
				//console.log(url);
				//mongoclient.connect( url , { useNewUrlParser: true}, function(err, client) {
				mongoclient.connect( url , option , function(err, client) {
                    


                    if (!_.isNull( err)){
                        if (!_.isUndefined(err)){
                            assert.equal(null, err);
                            console.log("mongoDB err : " + err);	
                            t.err=err
                            t.status=false
                            cb(t); 	
                            return;	
                        }		
                    }

                    db = client.db( "test").admin();

                    t.db=db;
                    t.client=client;
                    
                    cb(t); 

                    
                    return

                    // test
                    /*
                    db.listDatabases(function(err, dbs) {

                        assert.equal(null, err);
                        
                        assert.ok(dbs.databases.length > 0);

                        console.log(dbs.databases)
                         console.log( "connected")
                        t.db=db;
                        t.client=client;
                        
                        cb(t); 

                        client.close();

                        return
                        
                    });
                    */
                    
					
                    //var user=db.collection("users");
						
										
														  
					
					//client.close();
				});

        }


        ,init : function(){
            var args=arguments;
            var args_l=args.length;
            var param={ name : "" }

            this.l_this=this ;

            if ( args_l > 0 ){
                if ( _.isPlainObject(args[0] )){
                    if (!_.isUndefined(args[0].name)){
                        param.name=args[0].name;
                    }
                }
                if ( _.isString(args[0] )){
                    param.name=args[0];
                }
            }

            _.each( this ,(r,i)=>{
                if (_.isPlainObject(r)){
                    if ( !_.isUndefined(r.l_this)){
                        r.l_this=l_this
                    }
                }
            })

            this.name=param.name;




        }
    }
    l_this.init.apply( l_this , arguments) ;
    return l_this ;
}

var settings_file=function(){
    l_this = {
        name : "settings_file"

        ,path : "../data/settings.json"

        ,data : {}
        ,getfile : function(){
            var nd_generated_setup_path=path.resolve( "../data/settings.json");            

            var file_data_s=fs.readFileSync( nd_generated_setup_path , 'utf8');
            var file_data_jsn=JSON.parse(file_data_s);


            var vserv={};
            
            vserv.host=file_data_jsn.host;
          
            vserv.port=file_data_jsn.port;

            vserv.name=file_data_jsn.name;

            var temp_val="use_dot_env_secrets"
            if (!_.isUndefined(file_data_jsn[temp_val])){
                vserv[temp_val]=file_data_jsn[temp_val]
            }else{
                vserv[temp_val]=false
            }

            if (!vserv["use_dot_env_secrets"]){
                var temp_val="jwt_secret"
                if (!_.isUndefined(file_data_jsn[temp_val])){
                    vserv[temp_val]=file_data_jsn[temp_val]
                }
                var temp_val="cookieSecret"
                if (!_.isUndefined(file_data_jsn[temp_val])){
                    vserv[temp_val]=file_data_jsn[temp_val]
                }
            }else{
                var temp_val="dot_env_secrets_path"
                if (!_.isUndefined(file_data_jsn[temp_val])){
                    vserv[temp_val]=file_data_jsn[temp_val]
                }else{
                    vserv[temp_val]="../.env"
                }
                var dotenvfile={}
                // dotenv  getconfigs
                var temp_val="jwt_secret"
                if (!_.isUndefined(dotenvfile[temp_val])){
                    vserv[temp_val]=dotenvfile[temp_val]
                }
                var temp_val="cookieSecret"
                if (!_.isUndefined(dotenvfile[temp_val])){
                    vserv[temp_val]=dotenvfile[temp_val]
                }
            }
            
            var temp_val="cookieExpires"
            if (!_.isUndefined(file_data_jsn[temp_val])){
                vserv[temp_val]=file_data_jsn[temp_val]
            }

            var temp_val="jwtoptions" // eg  // { /* expiresIn : 300  */ }
            if (!_.isUndefined(file_data_jsn[temp_val])){
                vserv[temp_val]=file_data_jsn[temp_val]
            }else{
                vserv[temp_val]={}
            }
            
            var temp_val="uploads"
            if (!_.isUndefined(file_data_jsn[temp_val])){
                vserv[temp_val]=file_data_jsn[temp_val]
            }else{
                vserv[temp_val]="../data/usershome"
            }

            var temp_val="use_db_localfile"
            if (!_.isUndefined(file_data_jsn[temp_val])){
                vserv[temp_val]=file_data_jsn[temp_val]
            }
            var temp_val="db_localfile"
            if (!_.isUndefined(file_data_jsn[temp_val])){
                vserv[temp_val]=file_data_jsn[temp_val]
            }

            vserv.debugmode=file_data_jsn.debugmode;
            vserv.debuglevels=file_data_jsn.debuglevels;

            vserv.env_type=file_data_jsn.env_type;
                env_type=vserv.env_type;

            vserv.httpProtoString=file_data_jsn.httpProtoString;
            var ishttps=false;
            if (vserv.httpProtoString==="https"){
                ishttps=true;    
            }else{
                vserv.httpProtoString="http"
            }
            vserv.sslkey=file_data_jsn.sslkey;
            vserv.sslcert=file_data_jsn.sslcert;

            vserv.systems=file_data_jsn.systems;
            vserv.system=file_data_jsn.system;

            vserv.show_settings=file_data_jsn.show_settings;
            vserv.show_codenote=file_data_jsn.show_codenote;
            vserv.show_note=file_data_jsn.show_note;

            var tempjson_file_data_jsn=_.clone(file_data_jsn);
            if (vserv.show_settings){  
                delete tempjson_file_data_jsn.codenote;
                delete tempjson_file_data_jsn.note;
                console.log(tempjson_file_data_jsn)
            }

            if (vserv.show_codenote){       
                console.log(file_data_jsn.codenote)
            }

            if (vserv.show_note){      
                console.log( "\nnote : \n" , file_data_jsn.note , "\n")
            }

            if (!_.isUndefined(file_data_jsn.fsusers)){
                vserv.users=file_data_jsn.fsusers
            }else{ vserv.users={}}

            this.data=vserv;

        }
    
        ,init : function(){
            var args=arguments;
            var args_l=args.length;
            var param={ name : "" }

            this.l_this=this ;

            if ( args_l > 0 ){
                if ( _.isPlainObject(args[0] )){
                    if (!_.isUndefined(args[0].name)){
                        param.name=args[0].name;
                    }
                    if (!_.isUndefined(args[0].path)){
                        param.path=args[0].path;
                    }
                }
                if ( _.isString(args[0] )){
                    param.name=args[0];
                }
            }

            this.name=param.name;
            this.path=param.path;


            this.getfile()

        }
    }
    l_this.init.apply( l_this , arguments) ;
    return l_this ;
}

module.exports.gl=new vrtstd();
module.exports.settings=settings_file;
