var child_process=require('child_process')
var fs=require('fs')
var execSync=child_process.execSync; // synchronouse shell run : var result=execSync(cmdStr)
var existsSync=fs.existsSync;

/*
    !!!!!!!!! 
        Only vanilla and native node libs allowed ,  
        ...no third party library dependancies allowed to be loaded in this file
    !!!!!!!!!!!!!
*/

var main={
    params : function(cb){
        process.argv.forEach(function (val, index, array) {
            cb(val, index, array)
        })
    },
    shell : function(){
        // commnand ,  callback function
        var l_val="";            
        var l_args=arguments;
        var l_args_len=l_args.length;
        var l_callback=function(){} ;
        var l_command = "" ;
        var param_array = [] ;

        if ( l_args_len > 0 ){
            var l_i=0;
            switch( typeof l_args[l_i] ){
                    case "object" :
                        if (l_args[l_i] instanceof Array ){
                            //param_array=l_args[l_i];
                        }else{
                            // is object

                        }

                        break;
                    case "function" :
                        l_callback=l_args[l_i];
                        break;
                    default :
                        l_command=l_args[l_i] ;
                        break;
            }

            var l_i=1;
            if ( l_args_len > l_i ){
                switch( typeof l_args[l_i] ){
                    case "object" :
                        if (l_args[l_i] instanceof Array ){
                            param_array=l_args[l_i];
                        }else{
                            // is object

                        }
                        break;
                    case "function" :
                        l_callback=l_args[l_i];
                        break;
                    default :
                        break;
                }
            }

            var l_i=2;
            if ( l_args_len > l_i ){
                switch( typeof l_args[l_i] ){
                    case "object" :
                        if (l_args[l_i] instanceof Array ){

                        }else{
                            // is object

                        }
                        break;
                    case "function" :
                        l_callback=l_args[l_i];
                        break;
                    default :
                        break ;
                }
            }


        }else{
            return ;
        }

        //console.log( "....",param_array);

        var l_exec=child_process.exec;
        l_exec( l_command ,{maxBuffer: 1024 * 40000}, function(error, stdout, stderr){
            if ( !(stdout==="" && error==="Error: Command failed") ){
                if (error) {
                console.error(`exec error...:${error}` , '~~~' );
                l_callback( `exec error...:${error}` );
                return;
                }
            }

            l_callback( stdout );
        });

        return 
    },
    depcy : function(){      
        //var l_this=this  
        var l_obj={
                l_this : main,
                recs : [],
                check : function(){
                    var l_this=this.l_this
                    this.recs.forEach(function(r,i){
                        var status=true
                        var type="f"
                        if (r.type==="mkdir" || r.type==="md"){
                            if (existsSync(r.dir)) {
                                status=true 
                                type="md"                  
                            }else{
                                status=false
                                type="md"   
                                console.log(`\n\n\nerror : ${r.dir} doenst exists\n\n\n`)
                            }
                        }
                        if (r.type==="dir" || r.type==="d"){
                            if (existsSync(r.dir)) {
                                status=true 
                                type="d"                  
                            }else{
                                status=false
                                type="d"   
                                console.log(`\n\n\nerror : ${r.dir} doenst exists\n\n\n`)
                            }
                        }
                        if (r.type==="file" || r.type==="f"){
                            if (existsSync(r.file)) {
                                status=true 
                                type="f"                  
                            }else{
                                status=false
                                type="f"
                                console.log(`\n\n\nerror : ${r.file} doenst exists\n\n\n`)
                            }
                        }
            
                        if (!status){
                            if (type==="md"){
                                console.log(`updating from template directory : ${r.dir}` )
                                if (r.res.action==="makedir"){
            
                                    if (!_.isUndefined(r.test)){
                                        if (r.test){
                                            return;
                                        }
                                    }
            
                                    var cmdinit=`mkdir -p ${r.dir}`
                                    console.log(cmdinit)
                                    l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                    
                                }
                            }
            
                            if (type==="d"){
                                console.log(`updating from template directory : ${r.dir}` )
                                if (r.res.action==="copydir"){
            
                                    if (typeof  r.test!== "undefined"){
                                        if (r.test){
                                            return;
                                        }
                                    }
            
                                    var cmdinit=`mkdir -p ${r.dir} ;cp -Rp ${r.res.src } ${r.dir}/../`
                                    console.log(cmdinit)
                                    l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                    
                                }
                            }
            
                            if (type==="f"){
                                console.log(`updating from template file : ${r.file}` )
                                if (r.res.action==="fetchtemplate"){
            
                                    if (typeof  r.test!== "undefined"){
                                        if (r.test){
                                            return;
                                        }
                                    }
            
                                    var cmdinit=`cp -p ${r.res.src } ${r.file}`
                                    console.log(cmdinit)
                                    l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                    
                                }
                            }
            
                        }
                        
            
                    })
                    
                },
                add : function(rec){
                    var l_this=this.l_this
                    this.recs.push(rec)
                },
                init : function(){
                    //var l_this=this.l_this
                    //this.check()
                }
            
            
            }
            
        l_obj.init.apply( this , arguments)
        return l_obj
    },

    init_depcy : function(){ // init dependancies

        //////// init dependancies ////

        var depcy=new main.depcy()

        if (true){
            depcy.add({ name : "nodejspackages", file : "../nodeapp/package.json" , type :  "f" , res : { action : "fetchtemplate" , src : "../install_update/templates/nodeapp/package.json" } })
            depcy.add({ name : "reactjspackages", file : "../my-app/package.json" , type :  "f" , res : { action : "fetchtemplate" , src : "../install_update/templates/my-app/package.json" } })
            
            depcy.add({ name : "nodejsstartdev", file : "../nodeapp/cstartdev.sh" , type :  "f" , res : { action : "fetchtemplate" , src : "../install_update/templates/nodeapp/cstartdev.sh" } })
            depcy.add({ name : "reactjsstartdev", file : "../my-app/startdev.sh" , type :  "f" , res : { action : "fetchtemplate" , src : "../install_update/templates/my-app/startdev.sh" } })

            depcy.add({ name : "addonsInstallNewDir", dir : "../addons/install" , type :  "md" , res : { action : "makedir"  } })
            depcy.add({ name : "addonsArchiveNewDir", dir : "../addons/archive" , type :  "md" , res : { action : "makedir"  } })
            depcy.add({ name : "addonsFaieldNewDir", dir : "../addons/failed" , type :  "md" , res : { action : "makedir"  } })
            depcy.add({ name : "addonsFaieldNewDir", dir : "../addons/temp" , type :  "md" , res : { action : "makedir"  } })
            depcy.add({ name : "addonsReg", file : "../addons/reg.json" , type :  "f" , res : { action : "fetchtemplate" , src : "../addons/templates/reg.json" } })


            depcy.add({ name : "datasettings", file : "../data/settings.json" , type :  "f" , res : { action : "fetchtemplate" , src : "../data/template/settings.json" } })

            depcy.add({ name : "datadb1", dir : "../data/db1" , type :  "d" , res : { action : "copydir" , src : "../data/template/db1" } })

            depcy.add({ name : "datadbs", dir : "../data/dbs" , type :  "md" , res : { action : "makedir"  } })

            depcy.add({ name : "custommenusNewDir", dir : "../my-app/src/components/custom" , type :  "md" , res : { action : "makedir"  } })
            depcy.add({ name : "custommenus", file : "../my-app/src/components/custom/custommenus.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../my-app/src/components/templates/custommenus.js" } })
            depcy.add({ name : "cmmode", file : "../my-app/src/components/custom/cmmode.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../my-app/src/components/templates/cmmode.js" } })
            depcy.add({ name : "frontpage", file : "../my-app/src/components/custom/frontpage.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../my-app/src/components/templates/frontpage.js" } })
            depcy.add({ name : "frontpage", file : "../my-app/src/components/custom/globalStateReducer.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../my-app/src/components/templates/globalStateReducer.js" } })
            depcy.add({ name : "customPageMainApp", file : "../my-app/src/components/custom/customPageMainApp.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../my-app/src/components/templates/customPageMainApp.js" } })
            depcy.add({ name : "custommenus", file : "../my-app/src/components/custom/custommenus.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../my-app/src/components/templates/custommenus.js" } })
            depcy.add({ name : "cmmode", file : "../my-app/src/components/custom/cmmode.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../my-app/src/components/templates/cmmode.js" } })

            depcy.add({ name : "clientelectronEjs", file : "../clients/electron/app/public/electron.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../clients/electron/app/public/templates/electron.js" } })
            depcy.add({ name : "clientelectronPreLdjs", file : "../clients/electron/app/public/preload.js" , type :  "f" , res : { action : "fetchtemplate" , src : "../clients/electron/app/public/templates/preload.js" } })
            depcy.add({ name : "clientelectronPackage", file : "../clients/electron/app/package.json" , type :  "f" , res : { action : "fetchtemplate" , src : "../clients/electron/app/templates/package.json" } })

            depcy.check()
            
            //////// node js compare template package.json to custom current

            var templatePckJsn= JSON.parse( fs.readFileSync("../install_update/templates/nodeapp/package.json" , 'utf8') );
            var PckJsn= JSON.parse( fs.readFileSync("./package.json", 'utf8') );
        
            var hasnewPckjsn=false
            
            Object.keys(templatePckJsn.dependencies).forEach((v , p)=>{
                //console.log(p  , " ????" , v , " --- " ,typeof(PckJsn.dependencies[p]) )
                if ( typeof  PckJsn.dependencies[v]=== "undefined"){
                    hasnewPckjsn=true
                    console.log("please install --> nodeapp : npm i -s " , v ,    "     # ( " ,templatePckJsn.dependencies[v], " ) ")
                }        

            })
            if (hasnewPckjsn){
                console.log("\n\n\n=========!!!!!!!!!!==========\n\n")
            }

            // your custom added packages 
            var hasnewPckjsn=false
            
            Object.keys(PckJsn.dependencies).forEach((v , p)=>{
                if ( typeof  templatePckJsn.dependencies[v] === "undefined"){
                    hasnewPckjsn=true
                    console.log("your custom added packages --> nodeapp : npm i -s " , v ,    "     # ( " ,PckJsn.dependencies[v], " ) ")
                }        

            })
            if (hasnewPckjsn){
                console.log("\n\n\n=========!!!!!!!!!!==========\n\n")
            }

            /////// react js compare template package.json to custom current

            var RtemplatePckJsn= JSON.parse( fs.readFileSync("../install_update/templates/my-app/package.json" , 'utf8') );
            var RPckJsn= JSON.parse( fs.readFileSync("../my-app/package.json", 'utf8') );
        
            var hasnewPckjsn=false
            
            Object.keys(RtemplatePckJsn.dependencies).forEach((v , p)=>{
                if ( typeof  RPckJsn.dependencies[v] === "undefined"){
                    hasnewPckjsn=true
                    console.log("please install --> my-app (reacjs) : npm i -s " , v ,    "     # ( " ,RtemplatePckJsn.dependencies[v], " ) ")
                }        

            })
            if (hasnewPckjsn){
                console.log("\n\n\n=========!!!!!!!!!!==========\n\n")
            }

            // your custom added packages 
            var hasnewPckjsn=false
            //Object.keys({ a : "1" , b : "2" } ).forEach( function( r, i ){ console.log( r , " - " , i ) } )
            Object.keys(RPckJsn.dependencies ).forEach((v , p)=>{
                if ( typeof  RtemplatePckJsn.dependencies[v] === "undefined"){
                    hasnewPckjsn=true
                    console.log("your custom added packages --> my-app (reacjs) : npm i -s " , v ,    "     # ( " ,RPckJsn.dependencies[v], " ) ")
                }        

            })
            if (hasnewPckjsn){
                console.log("\n\n\n=========!!!!!!!!!!==========\n\n")
            }
        }

    },

    proc_params_init : function(){
        process.argv.forEach(function (val, index, array) {
            if (index > 1){
                //console.log("prompt : ", index + ': ' + val);
            }
            
            
            if (val==="-h" || val==="-help" || val==="--help"){
                var help= `--------HELP------\n` 
                    help+=`====================\n` 
                    help+=`-dip : overide data/settings with default IP address\n` 
                    help+=`-port : overide data/settings port\n` 
                    help+=`\n` 
                    help+=`-npmnode : install react packages\n` 
                    help+=`-npmreact : install react packages\n` 
                    help+=`-npmreactbuild : npm build run react \n` 
        
                    
                    console.log( help )
                process.exit()
            }
        
            var npmnode=false
            if (val==="-npmnode" || val==="--npmnode" ){
                npmnode=true
            }
            var npmreact=false
            if (val==="-npmreact" || val==="--npmreact" ){
                npmreact=true
            }
            var npmreactbuild=false
            if (val==="-npmreactbuild" || val==="--npmreactbuild" ){
                npmreactbuild=true
            }
        
            if (val==="-install" || val==="--install" ){
                npmnode=true ;npmreact=true ;npmreactbuild=true
            }
            
        
            /////////////
            
            if (npmnode){
                if (!fs.existsSync("./package.json")){
                    execSync("cp -p  ../install_update/templates/nodeapp/package.json ./package.json" )            
                }
                var shellinst=execSync(`npm install --save --force`)
                console.log(shellinst)
            }
            if (npmreact){
                if (!fs.existsSync("../my-app/package.json")){
                    execSync("cp -p  ../install_update/templates/my-app/package.json ../my-app/package.json")            
                }
                var shellinst=execSync(`cd ../my-app ; npm install --save --force`)
                console.log(shellinst)
            }
        
            if (npmreactbuild){
                var shellinst=execSync(`cd ../my-app ; npm run build`)
                console.log(shellinst)
            }
        
        });
        
    },


    init : function(){
        var args=arguments;
        var args_l=args.length;
        var param={ name : "" }

        this.l_this=this ;

        
      
    }
}
main.init()



module.exports.main=main;