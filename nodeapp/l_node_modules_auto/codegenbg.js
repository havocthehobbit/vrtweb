var _ = require("lodash");

var $gl = require("../l_node_modules/global.js").gl;


var main={
    auto_run : function(){ 
        console.log("auto_running codegen")        
    }
    ,table : "../data/db1/codegenprojects.json"
    ,schema : {        
        "uuid" : "",
        "name" : "",
        "description" : "",
        "useruuid" : "",
        "editor" : {},
        "project" : {},
        "tables" : { "all" : []},
        "files" : { "all" : []},
        "paths" : { "all" : []},
        "views" : { "all" : []},
        "reactJS" : { "all" : []},
        "JS" : { "all" : []},
        "nodeJS" : { "all" : []},
        "flutter" : { "all" : []},
        "golang" : { "all" : []},
        "db" : { "details" : {}, "all" : []},
        "notes" : { "all" : []},
        "note" :  "" ,
        "todo" : { "all" : []},
        "dependancies" : { "all" : []},
        "buildManager" : {  "all" : []},
        "version" : { "current" : 0, "currString" : "", "all" : []},
        "codegenversion" : { "current" : 0, "currString" : "", "all" : []},
        "dateCreated" : "",
        "createdBy" : { "all" : []},
        "lastEditedBy" : "",
        "dateLastEdited" : "",
        "stats" : {},
        "progress" : {},
        "progressperc" : 0,
        "workflow" : { "main" : {}, "all" : []},
        "team" : {},
        "parentprojuuid" : [],
        "linkedproj" : [] 
        
    },getProject : function( arg1 , fn1){
        var args=arguments;
        var args_l=args.length;

        var ret_data={ data : {} }
        
        var cb=function(){}

        var uuid;

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                var a0=args[0];
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                if (!_.isUndefined(a0.uuid)){
                    uuid=args[0].uuid
                }
                
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }
        
        var jsonfilepath= this.table ;
    
        var mainfn=function(){
            
        }

        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;
            //var notesret=[];
            var found=false, founditer, foundrec={};
            var retr={ status : true , rec : {}};
            //console.log("uuid " , uuid)
            _.each(new_data.all , function(rec, i){                
                if (rec.uuid===uuid){                                        
                    //ret_data=rec;
                    found=true;
                    founditer=i;
                    foundrec=rec;
                    //console.log(foundrec)
                }

            })
            if (found){
                retr.rec=foundrec;
                retr.status=true;
            }

            cb(retr)
            //console.log("news : " , new_data)
        })        
    },listProjects : function( arg1 , fn1){
        var args=arguments;
        var args_l=args.length;

        var ret_data={ data : {} }
        
        var cb=function(){}

        var uuid=arg1;

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                var a0=args[0];
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                if (!_.isUndefined(a0.date)){
                    cb=args[0].date
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }
        
        var jsonfilepath= this.table ;
    
        var mainfn=function(){
            
        }
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            var retr=[]
            
            _.each(new_data.all,function(r,i){
                var nr={}
                nr.uuid=r.uuid;
                nr.dateCreated=r.dateCreated;
                nr.createdBy=r.createdBy;
                nr.lastEditedBy=r.lastEditedBy;
                nr.dateLastEdited=r.dateLastEdited;
                nr.name=r.name;
                nr.progressperc=r.progressperc;
                retr.push(nr)

            })
            
            cb(retr)
           
        })        
    },saveProject : function( arg1 , fn1){
        var args=arguments;
        var args_l=args.length;
        var t=this;

        var ret_data={ data : {} }
        
        var cb=function(){}

        var useruuid;
        var uuid;
        
        

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                var a0=args[0];
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                if (!_.isUndefined(a0.date)){
                    var date=args[0].date
                }
                if (!_.isUndefined(a0.useruuid)){
                    useruuid=args[0].useruuid
                }
                if (!_.isUndefined(a0.uuid)){
                    uuid=args[0].uuid
                }
                
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }
        
        var jsonfilepath= this.table ;
    
        var mainfn=function(){
            
        }

        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;
            var notesret=[];
            var found=false, foundIter;            
            _.each(new_data.all , function(rec, i){    
                
                if (rec.uuid===arg1.uuid){                                        
                    //ret_data=rec;
                    //notesret.push(rec )                    
                    foundIter=i;
                    found=true;
                                      
                    //return;
                }

            })

            if (found){                
                var i = foundIter;
                var rec=new_data.all[i]
                if (_.isUndefined(rec.dateCreated)){
                    arg1.dateCreated=new Date();
                }else{                            
                    arg1.dateCreated=rec.dateCreated;
                    if (rec.dateCreated===""){
                        arg1.dateCreated=new Date();
                    }
                }

                arg1.dateLastEdited=new Date();
                
                if (_.isUndefined(rec.uuid)){
                    arg1.uuid=$gl.uuid();    
                }else{
                    arg1.uuid=rec.uuid;
                    if (arg1.uuid===""){
                        arg1.uuid=$gl.uuid();
                    }
                }
                

                //new_data.all .splice(i, 1) // delete old one
            }
            //console.log(arg1)
            var new_rec=_.merge(t.schema, arg1)

            if (!found){
                new_rec.dateCreated=new Date()
                new_rec.dateLastEdited=new Date()

                
                if (_.isUndefined(new_rec.uuid)){
                    new_rec.uuid=$gl.uuid();               
                }else{                            
                    if (new_rec.uuid===""){                        
                        new_rec.uuid=$gl.uuid();
                    }
                }
                
            }

            
            if (found){
                new_data.all[foundIter]=new_rec // update record
            }else{
                new_data.all.push(new_rec) // update record
            }
            
            
            
        

            $gl.save_json_db(jsonfilepath  , new_data , function(){
               
                cb(new_rec)

            })      

            //cb(notesret)
            //console.log("news : " , new_data)
        })        
    }

}

module.exports.codegen=main;