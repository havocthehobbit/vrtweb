var _ = require("lodash");
var $gl = require("../l_node_modules/global.js").gl; // this contanes some extra modules and standard library function that can be made to make life easier , please see help under nodejsVRTwebStdLib
//

var apiname="jsfiledb"

var main={ 
            auto_run : function(params){  // runs as the modules starts being initialised 
                console.log("auto_running " + apiname)
                
                
            },
            run_after_init : function(params){ // params : { http: http , io : io} // io = socket.io 

                /*
                params.mds.sched.add( 
                        {   name : "10 secs" , uuid : "123", 
                            addedby : apiname,
                            type : "i",
                            runtime : [ { secs : 20  , range : [] } ],
                            task : function(){ 
                                console.log( " taks 10 secs ")
                            }  
                        
                        } 
                        
                        
                        ,function(){

                        })
                */

            },
            schema : {
                links :{},
                dbs : {
                    db1 : {
                        name : "db1" ,
                        path : "../datab/db1",
                        type : "jsonfile",
                        schema : {
                            users : {
                                tbname : "users",
                                idxmain : "userid",
                                index : {
                                    userid : [
                                        { name : "userid" }
                                    ],
                                    uuid : [
                                        { name : "uuid" }
                                    ],
                                },
                                tblinks :{

                                },
                                cols : [

                                ]
                            },
                            calendar_events : {
                                tbname : "calendar_events",
                                dxmain : "uuid_type",
                                index : {
                                    uuid_type : [
                                        { name : "type" },
                                        { name : "uuid" }
                                    ]
                                },
                                tblinks :{

                                },
                                cols : [

                                ]
                            },
                            news : {
                                tbname : "news",
                                idxmain : "uuid",
                                index : {
                                    uuid : [                                       
                                        { name : "uuid" }
                                    ]
                                },
                                tblinks :{

                                },
                                cols : [

                                ]
                            },
                        }
                    }
                }
            },
            get : function(jsonfilepath ,cb){
                var tt=this;
              
                   
                $gl.get_json_db(   jsonfilepath  , function(alldata){
                    
                    cb(alldata)
                })
            },
            getQuery : function(query,data ,cb){
                var q=query
                var hasPath=false
                var path=[]
                var andMain=false
                var orMain=false
                if (_.isPlainObject(query)){

                    if (_.isUndefined(q.path)){
                        hasPath=true
                        path=q.path
                    }

                    if (_.isUndefined(q.and)){
                        andMainB=true
                        andMain=q.and
                        
                    }
                    if (_.isUndefined(q.or)){
                        orMainB=true
                        orMain=q.or
                    }

                }

                if (andMainB){
                    
                }


                cb()
            },
            getBySchema : function(params , cb){ // { searchvalas/f/s : { "prop" : "val"} , db : "" , tb : "" , idx : ""}
                var tt=this

                var searchval
                if ( !_.isUndefined(params.searchval)){
                    searchval=params.searchval
                }                
                if ( !_.isUndefined(params.s)){
                    searchval=params.s
                }
                if ( !_.isUndefined(params.f)){
                    searchval=params.f
                }

                var db="db1"
                if ( !_.isUndefined(params.db)){
                    db=params.db
                }

                var dbschema={}
                if (!_.isUndefined(tt.schema.dbs[db])){
                    dbschema=tt.schema.dbs[db]
                }
                if (!_.isUndefined(params.dbschema)){
                    dbschema=params.dbschema
                }

                var idx=""
                if ( !_.isUndefined(params.idx)){
                    idx=params.idx
                }

                var tb=""
                if ( !_.isUndefined(params.tb)){
                    tb=params.tb
                }
                if ( !_.isUndefined(params.table)){
                    tb=params.table
                }

                var data=""
                if ( !_.isUndefined(params.data)){
                    data=params.data
                }


                if (idx===""){
                    //check if main
                    if ( !_.isUndefined(dbschema[tb].idxmain)){
                        idx=dbschema[tb].idxmain
                    }
                }


                var foundtotal=0;
                getSimple( tt.schema.path + "/" + tb + ".json", data,

                    function(tabledata ,cb_g){ 
                        var results=[]
                        tabledata.all.forEach(function(r1,r2){ 
                            
                            var foundcount=0;
                            var foundlen=dbschema[tb]["index"][idx].length;
                            _.each( dbschema[tb]["index"][idx], function(r,i){
                                if (r1[r.name]===searchval[r.name]){
                                    foundcount++

                                    if (foundcount===foundlen){
                                        foundtotal++
                                        results.push(r1)
                                        
                                    }
                                }
                            })
                        })

                        cb_g({ foundtotal : foundtotal, rows : results })
                    },
                    function(){ cb() }

                ) 


            },
            getSimple : function(jsonfilepath, new_data ,change_cb,cb){
                var tt=this;

                tt.getSimpleAll(function(alldata){
                    change_cb( alldata, function(changedData){
                       
                            if (_.isFunction(cb)){
                                cb({}) // done
                            }                        
                    })

                })                
            },
            getSimpleAll : function(jsonfilepath,cb){
                var tt=this;
               
                   
                $gl.get_json_db(   jsonfilepath  , function(alldata){
                    
                    cb(alldata)
                })
            },
            update : function(jsonfilepath  , new_data,cb){


                
            },
            updateSimple : function(jsonfilepath, new_data ,change_cb,cb){
                var tt=this;

                tt.getSimpleAll(function(alldata){

                    change_cb( alldata, function(changedData){
                        $gl.save_json_db(t.jsonfilepath  , changedData , function(){
                            if (_.isFunction(cb)){
                                cb({}) // done
                            }
                            
        
                        })
                    })

                })                
            }
            ,
            upsert : function(){

            },
            insert : function(){

            },
            delete : function(){

            },
            delete : function(){
                //splice( iter , numberOfDels1) // delete if parent is a object
            },
            tableExist : function(){

            }

}


 
module.exports[apiname]=main;