var _ = require("lodash");
var jwt = require("jsonwebtoken");

var $gl = require("../l_node_modules/global.js").gl;
const e = require("express");
//var $test_data = require("../l_node_modules/test_data.js").test_data;

//var all_data=$test_data.all_data;

var main={
    auto_run : function(params){

        console.log("init user lib"  ) 
        this.jwt_secret=params.vserv.data.jwt_secret
    },
    run_after_init : function(params){
        console.log("after init user lib") 
        
    } ,  
    jwt_secret : ""
    ,fetchUserDetail : function( userid , fn1){
        var ret_data={ data : {} }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
        
        var jsonfilepath= "../data/db1/users.json";
    
        var mainfn=function(){
            
        }

        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            _.each(new_data.all , function(rec, i){
                
                if (rec.userid===userid){                    
                    ret_data=rec;
                    cb(ret_data)
                    return;
                }

            })

            
            //console.log("news : " , new_data)
        })        
    }
    ,fetchUserDetailSync : function( userid , fn1){
        var ret_data={ data : {} }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
        
        var jsonfilepath= "../data/db1/users.json";
    
        var mainfn=function(){
            
        }

        $gl.get_json_db_sync(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            _.each(new_data.all , function(rec, i){
                
                if (rec.userid===userid){                    
                    ret_data=rec;
                    cb(ret_data)
                    return;
                }

            })

            
            //console.log("news : " , new_data)
        })        
    }
    ,fetchUserDetailByUUID : function( userid , fn1){
        var ret_data={ data : {} }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
        
        var jsonfilepath= "../data/db1/users.json";
    
        var mainfn=function(){
            
        }

        $gl.get_json_db(   jsonfilepath  , function(new_data){
           //t_data.data=new_data.all;

            _.each(new_data.all , function(rec, i){
                
                if (rec.uuid===userid){                    
                    ret_data=rec;
                    cb(ret_data)
                    return;
                }

            })

            
            //console.log("news : " , new_data)
        })        
    }
    ,fetchUserDetailByUUIDSync : function( userid , fn1){
        var ret_data={ data : {} }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
        
        var jsonfilepath= "../data/db1/users.json";
    
        var mainfn=function(){
            
        }

        $gl.get_json_db_sync(   jsonfilepath  , function(new_data){
           //t_data.data=new_data.all;

            _.each(new_data.all , function(rec, i){
                
                if (rec.uuid===userid){                    
                    ret_data=rec;
                    cb(ret_data)
                    return;
                }

            })

            
            //console.log("news : " , new_data)
        })        
    }    
    ,fetchUsersDetailSync : function( userid , fn1){
        var ret_data={ data : {} }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
        
        var jsonfilepath= "../data/db1/users.json";
    
        var mainfn=function(){
            
        }

        $gl.get_json_db_sync(   jsonfilepath  , function(new_data){
           //t_data.data=new_data.all;

            _.each(new_data.all , function(rec, i){
                
                if (rec.userid===userid){                    
                    ret_data=rec;
                    cb(ret_data)
                    return;
                }

            })

            
            //console.log("news : " , new_data)
        })        
    }
    ,fetchUsersDetailByUUID : function( userid , fn1){
        var ret_data={ data : {} }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
        
        var jsonfilepath= "../data/db1/users.json";
    
        var mainfn=function(){
            
        }

        $gl.get_json_db(   jsonfilepath  , function(new_data){
           //t_data.data=new_data.all;

            _.each(new_data.all , function(rec, i){
                
                if (rec.uuid===userid){                    
                    ret_data=rec;
                    cb(ret_data)
                    return;
                }

            })

            
            //console.log("news : " , new_data)
        })        
    }
    ,fetchUsersDetailByUUIDSync : function( userid , fn1){
        var ret_data={ data : {} }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
        
        var jsonfilepath= "../data/db1/users.json";
    
        var mainfn=function(){
            
        }

        $gl.get_json_db_sync(   jsonfilepath  , function(new_data){
           //t_data.data=new_data.all;

            _.each(new_data.all , function(rec, i){
                
                if (rec.uuid===userid){                    
                    ret_data=rec;
                    cb(ret_data)
                    return;
                }

            })

            
            //console.log("news : " , new_data)
        })        
    }
    ,fetchUsersDetails : function( a , fn1){ // all users
        var ret_data={ data : [] }
        
        var cb=function(){}
        if (!_.isUndefined(fn1)){ 
            cb=fn1;
        }
    
        var jsonfilepath= "../data/db1/users.json";
    
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            ret_data.data=new_data.all;
            cb(ret_data)
            //console.log("news : " , new_data)
        })        
    }
    ,getGroupsFromUser : function(){ // console.log( "getGroupsFromUser : " , mds.users.getGroupsFromUser("bob") )
        var args=arguments;
        var t=this;

        var cb=function(){}
    
        var ret_data={}
    
        userid=args[0];
        
    
        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
    
            }
    
            if (args.length > 1){
                cb=args[1];
            }
        }
    
        var all_users;
        

        var jsonfilepath= "../data/db1/users.json";
    
        $gl.get_json_db(  jsonfilepath, function(new_data){
            all_users=new_data.all
            //console.log( "-----" ,new_data)
        
            var founduser=false
            var userrec={}
            var has_user_rec=false;
            all_users.map(function(r , i){
                if (r.userid===userid){
                    has_user_rec=true;
                    userrec=r;
                    founduser=true
                }
            })
            
        
            if (founduser){
                usergroups=_.clone(userrec.groups);
                usergroups.push(userrec.group)
                ret_data=usergroups;
            }   
        
            cb(ret_data);

            return ret_data;
        })  

        
    }
    ,getRolesFromGroups : function(){ // console.log( "getRolesFromGroups : " ,  mds.users.getRolesFromGroups( mds.users.getGroupsFromUser("bob") ) )
        var args=arguments;
        var t=this;

        var cb=function(){}
    
        var ret_data={}
    
        groups=[];
        
    
        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isString(args[0])){
                    groups.push(args[0])
                }
        
                if (_.isArray(args[0])){
                    groups=_.clone(args[0])
                }
        
            }           
    
            if (args.length > 1){
                cb=args[1];
            }
        }
    
        var groupnames=[];
        
        groups.map(function(r,i){
            if (_.isPlainObject(r)){
                r.roles.map(function(r2,ri){
                    groupnames.push(r2)
                })
            }
            if (_.isString(r)){
                
                groupnames.push(r);
            }
        })        

        var jsonfilepath= "../data/db1/groups.json";

        $gl.get_json_db(  jsonfilepath, function(new_data0){
            all_data_groups=new_data0
            
            var rolenames_temp=[]
            _.each(groupnames , function(val,i){            
                _.each(all_data_groups , function(r2,i2){                                        
                    _.each(r2 , function(rr2,rri2){                    
                        //console.log("rrr ",  rr2.name , r2 )
                        //console.log("vvv ", "---" + val + "---")
                        if ( rr2.name===val){                           
                            _.each( rr2.roles,function(val3,i3){
                                rolenames_temp.push(val3)
                            })
                        }
                    })
                            
                    
                })
            })
          
            rolenames=_.uniq(rolenames_temp)
            
            roles={}
            var all_data_roles;

            var jsonfilepath= "../data/db1/roles.json";
            
            $gl.get_json_db(  jsonfilepath, function(new_data){
                all_data_roles=new_data.roles

                rolenames.map(function(val,i){
                    all_data_roles.map(function(r2,i2){
                        if (val===r2.name){
                            roles[val]=_.clone(r2);
                        }
                    })
            
                })
                
                ret_data=roles;
            
                cb(ret_data);
                return ret_data;
            })
        })
        
    }
    ,getProgramsFromRoles : function(){  // console.log( "getProgramsFromRoles : " , mds.users.getProgramsFromRoles( mds.users.getRolesFromGroups( mds.users.getGroupsFromUser("bob") ) ) )
        var args=arguments;
        var t=this;

        var cb=function(){}
    
        var ret_data={}
    
        roles=[];
        programs={};        
    
        if ( args.length > 0){    
            if (_.isPlainObject(args[0])){        
                roles=_.clone(args[0])
            }
    
            if (_.isArray(args[0])){                
                roles=_.clone(args[0])
            }        
    
            if (args.length > 1){
                cb=args[1];
            }
        }
        
        var all_data_programs;
        
        var jsonfilepath= "../data/db1/programs.json";
        
        var mainfn=function(){
            
        }

        $gl.get_json_db(  jsonfilepath, function(new_data){
            all_data_programs=new_data.programs

            //console.log("000 " , roles)
            _.each( roles , function(r,i){
                //console.log("111 " , r)
                r.programs.map(function(r2,i2){
                    all_data_programs.map(function(r3,i3){
                        if (r2===r3.name){
                            //console.log("444 - " , r2)
                            programs[r2]=_.clone(r3)
                        }
                    })
                })
            })
    
            ret_data=programs;
        
            cb(ret_data);
            return ret_data;
        })
        


    }
    ,getProgramAllowedFromUser : function(){
        var args=arguments;
        var t=this;

        var cb=function(){}
    
        var ret_data={}
    
        user=args[0];
        
    
        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
    
            }
    
            if (args.length > 2){
                cb=args[2];
            }
        }
    
        
        //var programs=t.getProgramsFromRoles( t.getRolesFromGroups( t.getGroupsFromUser(user) ) ) 

        t.getGroupsFromUser(user,function(u1){
            t.getRolesFromGroups( u1 , function(u2){
                t.getProgramsFromRoles( u2 , function(programs){
                    ret_data.data=programs;

                    res.jsonp(ret_data)
                }) 

            })

        })

        ret_data=programs;
    
        cb(ret_data);
        return ret_data;
    }
    ,checkUserAccessToProgram : function(){ //  // console.log( "checkUserAccessToProgram : " , mds.users.checkUserAccessToProgram("bob" , ["news" , "admingeneralpage"]))
        var args=arguments; 
        var t=this;

        var cb=function(){}
    
        var ret_data={}
    
        var user=args[0];
        var program=args[1];
    
        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
    
            }
    
            if (args.length > 2){
                cb=args[2];
            }
        }
    
        // get programs from user role
        var allowedPrograms
        
        t.getProgramAllowedFromUser(user, function(new_data){        
            allowedPrograms=new_data;
        
            var isAllowed=false;
            if (_.isArray(program)){ // [ "news" , "home"]
                var sz=program.length
                var truecnt=0;
                _.each(program,function(val , i){
                    _.each(allowedPrograms, function(r2 , i2){
                        if (r2.name===val){
                            truecnt++
                            if (truecnt===sz){
                                isAllowed=true;
                            }
                            
                        }
                    })
                })
            }
            if (_.isString(program)){ //  "news"
                _.each(allowedPrograms, function(r , i){
                    if (r.name===program){
                        isAllowed=true;
                    }
                })
            }
            
            ret_data=isAllowed;
            
            cb(ret_data)
        
            return ret_data;
        })
    }
    
    ,addUser : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,addUsers : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,delUser : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }

    ,addGroup : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,addGroups : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,delGroup : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }

    ,addProgram : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,addPrograms : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,delProgram : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }

    ,addRole : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,addRoles : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }
    ,delRole : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= this.table ;
    
        
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            ret_data=new_data.all;           

            cb(ret_data)
            
        })

    }


    ,verifyJWTroute : function(req,res,next ){
        var token = req.headers["x-auth-token"]
        //console.log( "auth token" , token)
        //console.log( "cookies 2 ::: " ,req.cookies )  
        
        var envMainJwtTokenKey=main.jwt_secret
        
        res.locals.rt_jwt_isAuth=false;
    
        if (!token || _.isUndefined(token)){
            token=req.cookies.token
        }
        //console.log( "auth token : " + req.cookies.token  ,  "x-auth-token : " + req.headers["x-auth-token"])
    
        //if (!token ){
        if (!token || _.isUndefined(token)){
            //console.log("no token err")
            //console.log(token)
            res.locals.decodedID= ""
            res.locals.rt_jwt_isAuth=false;
            res.locals.token=token
            //res.jsonp( {"error" : "no token supplied , please login again and reverify" })
            next()
        }else{
            jwt.verify(token , envMainJwtTokenKey , function(err , decoded){
                if ( err){
                    //console.log("failed to verify token")
                    //res.jsonp("error 2")
                    next()
                    //res.jsonp( {"error" : "failed to auth , please login again and reverify" })
                }else{
                    res.locals.decodedID= decoded.id
                    res.locals.decoded= decoded
                    res.locals.rt_jwt_isAuth=true;
                    res.locals.token=token
                    //console.log("token authenticate")
                   next()
                }
            })
        }
    },
    
    verifyJWT : function(){ // args token cb
        var ret={ status : "fail" , error : "" , data : {}}
        var locals={};
        var args=arguments;
    
        var token=args[0];
    
        var cb=function(){}        
        
        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
    
            }
    
            if (args.length > 1){
                cb=args[1];
            }
        }
        
        var envMainJwtTokenKey=main.jwt_secret
        
        jwt.verify(token , envMainJwtTokenKey , function(err , decoded){  // todo check session table to see if token expired or blacklisted
            
            if ( err){
                //console.log( "error : ", err )
                ret.err=err;                        
            }else{
                locals.decodedID= decoded.id
                locals.decoded=decoded
                locals.userid=decoded.userid
    
                locals.rt_jwt_isAuth=true;
                locals.token=token
                
                ret.status = "success"
                ret.data=locals;
            }
    
            cb(ret);    
        })
    }

    ,verifyLoginAPI : function(){ // either ({req : req},cb) or  ({token : token },cb)   // return { allowed : bool ... details : {user , groups , roles , programs }  }
        var tt=this
        var allowed=false
        var status="failed"
        var details={}
        var cb=function(){} 
        
        var vars={
            cb : cb,
            req : undefined,
            token : undefined
        }
        
        var args=arguments;
        var temp=""
        if ( args.length > 0){
            if (_.isPlainObject(args[0])){

                temp="cb"
                if (!_.isUndefined(args[0][temp])){
                    vars.cb=args[0][temp]
                }

                temp="req"
                if (!_.isUndefined(args[0][temp])){
                    vars[temp]=args[0][temp]
                }

                temp="token"
                if (!_.isUndefined(args[0][temp])){
                    vars[temp]=args[0][temp]
                }

                temp="x-auth-token"
                if (!_.isUndefined(args[0][temp])){
                    vars["token"]=args[0][temp]
                }
                
            }else{
                
                    vars["token"]=args[0]
                
            }
    
            if (args.length > 1){
                vars.cb=args[args.length-1];
            }
        }

        if (!_.isFunction(vars.cb)){
            vars.cb=function(){} 

            status="failed";
            allowed=false;
            vars.cb({ allowed : allowed , status : status  })
            return
        }

        
        if (_.isUndefined(vars.token)){
            vars.token=vars.req.headers["x-auth-token"];
            if (!vars.token || _.isUndefined(vars.token)){
                if (!_.isUndefined(vars.req)){ 
                    vars.token=vars.req.cookies.token;
                }
            }
        }

        this.verifyJWT(vars.token,function(tkdata){   
            if (tkdata.status==="success"){
                var userid=tkdata.data.userid ;
                status="success";
                allowed=true;

                details=tkdata.data

                if ( tkdata.data.rt_jwt_isAuth ){
                    tt.getGroupsFromUser(userid,function(u1){ 
                        details.groups=u1
                        tt.getRolesFromGroups( u1 , function(u2){ 
                            details.roles=u2
                            tt.getProgramsFromRoles( u2 , function(programs){ 
                                details.programs=programs;                                
                                tt.fetchUserDetail(userid,function(usr){ 
                                    details.user=usr; 
                                    delete details.user.password
                                    delete details.user.insecure_password
                                    vars.cb({ allowed : allowed , status : status , userid : userid , details : details })
                                });
                            }) 

                        })

                    })
                           
                }else{
                    status="failed";
                    allowed=false;
                    vars.cb({ allowed : allowed , status : status , details : tkdata  })
                }
            }else{
                status="failed";
                allowed=false;
                vars.cb({ allowed : allowed , status : status , details : tkdata  })
            }
        })
    }
    ,sessionUserUpdate : function(){
        var args=arguments;
        var userdata=args[0];

        var cb=function(){}        
    
        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
    
            }
    
            if (args.length > 1){
                cb=args[1];
            }
        }
    

        //console.log("saving session" , userdata)
        var dt={ userid : userdata.userid , token : userdata.token ,
                    lastupdated : new Date(),
                    uuid : userdata.uuid
                } ;



       // all_data.sessions.all[userdata.userid]=dt;
        //all_data.sessions.all_tks[userdata.token]=dt;

        //$gl. save db session ; 

        var ret_data={}

        var all_data;
        
        var jsonfilepath= "../data/db1/sessions.json";
        var mainfn=function(){

        }

        $gl.get_json_db(  jsonfilepath, function(new_data){
            all_data=new_data.sessions.all;
            
            if (!_.isUndefined(dt.userid)){
                var ndata={}
                var temp=_.merge( ndata , dt)
                ndata=temp;
                //all_data[dt.userid]=temp
                all_data[dt.userid]=ndata;
                new_data.sessions.all=all_data;
                
                $gl.save_json_db(jsonfilepath, new_data)
            }
            cb(ret_data);

            
        });
        return
    }
    ,getSessionByUser : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        var userid=""

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
                if (_.isString(args[0])){
                    userid=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= "../data/db1/sessions.json" ;
    
        var found=false;
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            _.each(new_data.all,function(r ,i){

                //ret_data=new_data.all;           
                if (r.userid===userid){
                    ret_data=r
                    found=true;
                    cb(ret_data)
                }

                
            })

            if ( !found){
                cb(ret_data)
            }
            
            
        })

    }
    ,getSessionByUUID : function( ){
        var args=arguments;
        var args_l=args.length;
        var ret_data={ data : {} }

        var cb=function(){}

        var uuid=""

        if ( args.length > 0){
            if (_.isPlainObject(args[0])){
                if (!_.isUndefined(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
                if (_.isFunction(args[0])){
                    cb=args[0];
                }
                if (_.isString(args[0])){
                    uuid=args[0];
                }
            }
            
            if (args.length > 1){
                cb=args[1];
            }
        }

        var jsonfilepath= "../data/db1/sessions.json" ;
    
        var found=false;
        $gl.get_json_db(   jsonfilepath  , function(new_data){
            //t_data.data=new_data.all;

            _.each(new_data.all,function(r ,i){

                //ret_data=new_data.all;           
                if (r.uuid===uuid){
                    ret_data=r
                    found=true;
                    cb(ret_data)
                }

                
            })

            if ( !found){
                cb(ret_data)
            }
            
            
        })

    }
    
    

}



module.exports.users=main;